package nl.tudelft.ti2806.pl1.gui.optionpane;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.util.List;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

import nl.tudelft.ti2806.pl1.gui.Window;

/**
 * @author Maarten
 *
 */
public class OptionsPane extends JScrollPane {

	// ***** Constants ***** //

	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = -8048134952005779117L;

	/**
	 * The width of the container.
	 */
	private static final int WIDTH = 220;

	/**
	 * The width of the pane in a dimension object.
	 */
	private static final Dimension SIZE = new Dimension(WIDTH,
			Integer.MAX_VALUE);

	/**
	 * 
	 */
	private static final int W_OFFSET = 20;

	/**
	 * 
	 */
	private static final Dimension PANE_SIZE = new Dimension(WIDTH - W_OFFSET,
			Integer.MAX_VALUE);

	/**
	 * 
	 */
	private static final int MAX_CHILD_WIDTH = 200;

	/**
	 * 
	 */
	public static final Dimension MAX_CHILD_SIZE = new Dimension(
			MAX_CHILD_WIDTH, Integer.MAX_VALUE);

	// /**
	// * The default insets (free space) values added around every placed
	// control.
	// */
	// private static final int HOR_INSETS = 10, VER_INSETS = 5;
	//
	// /**
	// * The default insets (free space) added around every placed control.
	// */
	// private static final Insets INSETS = new Insets(VER_INSETS, HOR_INSETS,
	// VER_INSETS, HOR_INSETS);

	// ***** Fields ***** //

	/**
	 * The window this option pane is part of.
	 */
	private Window window;

	// ***** Elements ***** //

	/**
	 * The panel containing the control elements.
	 */
	private JPanel pane = new JPanel();

	/**
	 * The genome table.
	 */
	private GenomeTable tblGenomes = new GenomeTable(MAX_CHILD_WIDTH);

	/**
	 * @return the genome table
	 */
	public final GenomeTable getGenomes() {
		return tblGenomes;
	}

	/**
	 * The group of elements showing information about a selected genome in the
	 * genome table.
	 */
	private SelectedGenomeGroup grpSelectedGenome = new SelectedGenomeGroup(
			this);

	/**
	 * The group of elements showing information about a selected node.
	 */
	private SelectedNodeGroup grpSelectedNode = new SelectedNodeGroup(this);

	/**
	 * @return the selected node group
	 */
	public final SelectedNodeGroup getSelectedNodeGroup() {
		return grpSelectedNode;
	}

	/**
	 * @param w
	 *            The window this option pane is part of.
	 */
	public OptionsPane(final Window w) {
		this.window = w;
		pane.setLayout(new BoxLayout(pane, BoxLayout.Y_AXIS));
		pane.setMaximumSize(PANE_SIZE);
		setBackground(Color.GRAY);
		pane.setAlignmentY(TOP_ALIGNMENT);
		setViewportView(pane);
		addControls();
		// Rectangle2D r1 = new Rectangle2D(width, height);
	}

	/**
	 * Method called after all window components are initialized.
	 * 
	 * @see Window#Window()
	 */
	public final void componentsLoaded() {
		window.content().getGraphPanel().registerObserver(grpSelectedNode);
	}

	/**
	 * Adds the control elements to the option pane.
	 */
	private void addControls() {
		place(new JLabel("Genomes:"));
		place(tblGenomes);
		place(grpSelectedGenome);
		place(grpSelectedNode);
		place(Box.createVerticalBox());
	}

	/**
	 * Creates a list of check box items based on a list of genome names and
	 * adds them to the genomes list.
	 * 
	 * @param genomeIds
	 *            A list of genome identifiers/names
	 * @param empty
	 *            If true, the list will first be emptied before filled with the
	 *            new rows, else, genodes will be appended to the list
	 * @param selected
	 *            The value of the check box for all genome rows created.
	 */
	public final void fillGenomeList(final List<String> genomeIds,
			final boolean empty, final boolean selected) {
		tblGenomes.fill(genomeIds, empty, selected);
	}

	/**
	 * Places a component on the next spot in the layout.
	 * 
	 * @param elem
	 *            The element to place.
	 */
	private void place(final Component elem) {
		pane.add(elem);
	}

	// /**
	// * Places a component on a given row in the layout, adding a given amount
	// of
	// * vertical insets below the element.
	// *
	// * @param elem
	// * The element to place.
	// * @param belowInset
	// * The vertical insets below the element.
	// */
	// private void place(final Component elem, final int belowInset) {
	// gbc.insets = new Insets(VER_INSETS, HOR_INSETS, belowInset, HOR_INSETS);
	// place(elem);
	// gbc.insets = INSETS;
	// }

	@Override
	public final String toString() {
		return this.getClass().toString();
	}

}
